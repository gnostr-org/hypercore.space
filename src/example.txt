
class ContactsService {
    constructor(account)Â {

    }
}




class ChatService {

    constructor(account: Account) {


        this.account = account;


        

        this.conversations = (ReplicatedSet) dataset.define('hhs/conversations', new ReplicatedSet());
        this.groups        = (ReplicatedSet) dataset.define('hhs/groups', new ReplicatedSet());


        this.messagesListener = (op) => {

        };

        this.conversationsListener = (op) => {

        };


        this.conversations.listen(op => { 

        });

        this.groups.listen((op) => {

        });

    }

    startConversation(someone: Identity) {

    }
    

class GroupConversation {
    constructor(groupIdentity: identity) {

    }
}

class MessageStream {


    constructor(local: Identity, remote: Identity, peer: Peer) {
        this.messages = new ReplicatedSet(PRIVATE)
        this.sentMessages.link(peer);
    }

    async send(message: ChatMessage) {

    }

}

class GroupConversation {

}

message = new ChatMessage()
